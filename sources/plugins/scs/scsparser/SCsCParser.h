/** \file
 *  This C header file was generated by $ANTLR version 3.4
 *
 *     -  From the grammar source file : D:\\Programming\\PROJECTS\\Eclipse\\workspace\\ScsGrammar\\src\\SCsC.g
 *     -                            On : 2013-04-20 09:11:20
 *     -                for the parser : SCsCParserParser
 *
 * Editing it, at least manually, is not wise.
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The parser 
SCsCParser

has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 *
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef pSCsCParser, which is returned from a call to SCsCParserNew().
 *
 * The methods in pSCsCParser are  as follows:
 *
 *  - 
 void
      pSCsCParser->syntax(pSCsCParser)
 *  - 
 void
      pSCsCParser->sentence_sentsep(pSCsCParser)
 *  - 
 void
      pSCsCParser->sentence(pSCsCParser)
 *  - 
 void
      pSCsCParser->sentence_lv23456(pSCsCParser)
 *  - 
 void
      pSCsCParser->sentence_lv1(pSCsCParser)
 *  - 
 void
      pSCsCParser->attrsList(pSCsCParser)
 *  - 
 void
      pSCsCParser->simpleIdtf_attrsep(pSCsCParser)
 *  - 
 void
      pSCsCParser->objectList(pSCsCParser)
 *  - 
 void
      pSCsCParser->objsep_IdtfWithInt(pSCsCParser)
 *  - 
 void
      pSCsCParser->intSentence(pSCsCParser)
 *  - 
 void
      pSCsCParser->intSentenceList(pSCsCParser)
 *  - 
 void
      pSCsCParser->intSentence_sentsep(pSCsCParser)
 *  - 
 void
      pSCsCParser->internal(pSCsCParser)
 *  - 
 void
      pSCsCParser->triple(pSCsCParser)
 *  - 
 void
      pSCsCParser->alias(pSCsCParser)
 *  - 
 void
      pSCsCParser->setIdtf(pSCsCParser)
 *  - 
 void
      pSCsCParser->objsep_AttrsList_idtfWithInt(pSCsCParser)
 *  - 
 void
      pSCsCParser->osetIdtf(pSCsCParser)
 *  - 
 void
      pSCsCParser->anyIdtf(pSCsCParser)
 *  - 
 void
      pSCsCParser->idtf(pSCsCParser)
 *  - 
 void
      pSCsCParser->simpleIdtf(pSCsCParser)
 *  - 
 void
      pSCsCParser->idtfWithInt(pSCsCParser)
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
// [The "BSD license"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_SCsCParser_H
#define _SCsCParser_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */

#include "scscparserdefs.h"
#define pName //retPtr
#define RECOVER //if(mNeedRecover) this->recover();
#define IFNR //RECOVER
#define SET_NEED_RECOVER(value) //mNeedRecover = value;
#define SNR(value) //SET_NEED_RECOVER(value)
#define IFNRR if(ParserNeedReturn()) return;
#define INIT_RULE(p) //initRule(p) 
#define BNTS(ptr) //mCurrentNode = retPtr;// before non terminal symbol
#define BTS(ptr) //mCurrentNode = retPtr;// before terminal symbol

#define CHECK_EXCEPTION     //\
  //if(mHasException)     \
  //  {             \
  //  mHasException=false;  \
  //  retPtr->setException(); \
  //}       
//after terminal symbol
#define ATS(ptr,methodName) \
  IFNRR
  //if(ptr!=NULL && mHasException==false) {pName->methodName(QString::fromStdString(ptr->getText()));} \
  //else {pName->methodName##Error();} \
  //CHECK_EXCEPTION \
  //IFNRR 
// after non terminal symbol
#define ANTS(ptr,methodName) \
  IFNRR
  //if(ptr!=NULL && mHasException==false) {pName->methodName(ptr);} \
  //else {pName->methodName##Error();} \
  //IFNRR 
#define CODE_AFTER_RULE //CHECK_EXCEPTION


void ParserRecover(pANTLR3_BASE_RECOGNIZER recognizer);




#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct SCsCParser_Ctx_struct SCsCParser, * pSCsCParser;



#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif

/** Context tracking structure for 
SCsCParser

 */
struct SCsCParser_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_PARSER   pParser;

     void
     (*syntax)	(struct SCsCParser_Ctx_struct * ctx);

     void
     (*sentence_sentsep)	(struct SCsCParser_Ctx_struct * ctx);

     void
     (*sentence)	(struct SCsCParser_Ctx_struct * ctx);

     void
     (*sentence_lv23456)	(struct SCsCParser_Ctx_struct * ctx);

     void
     (*sentence_lv1)	(struct SCsCParser_Ctx_struct * ctx);

     void
     (*attrsList)	(struct SCsCParser_Ctx_struct * ctx);

     void
     (*simpleIdtf_attrsep)	(struct SCsCParser_Ctx_struct * ctx);

     void
     (*objectList)	(struct SCsCParser_Ctx_struct * ctx);

     void
     (*objsep_IdtfWithInt)	(struct SCsCParser_Ctx_struct * ctx);

     void
     (*intSentence)	(struct SCsCParser_Ctx_struct * ctx);

     void
     (*intSentenceList)	(struct SCsCParser_Ctx_struct * ctx);

     void
     (*intSentence_sentsep)	(struct SCsCParser_Ctx_struct * ctx);

     void
     (*internal)	(struct SCsCParser_Ctx_struct * ctx);

     void
     (*triple)	(struct SCsCParser_Ctx_struct * ctx);

     void
     (*alias)	(struct SCsCParser_Ctx_struct * ctx);

     void
     (*setIdtf)	(struct SCsCParser_Ctx_struct * ctx);

     void
     (*objsep_AttrsList_idtfWithInt)	(struct SCsCParser_Ctx_struct * ctx);

     void
     (*osetIdtf)	(struct SCsCParser_Ctx_struct * ctx);

     void
     (*anyIdtf)	(struct SCsCParser_Ctx_struct * ctx);

     void
     (*idtf)	(struct SCsCParser_Ctx_struct * ctx);

     void
     (*simpleIdtf)	(struct SCsCParser_Ctx_struct * ctx);

     void
     (*idtfWithInt)	(struct SCsCParser_Ctx_struct * ctx);
    // Delegated rules

    const char * (*getGrammarFileName)();
    void            (*reset)  (struct SCsCParser_Ctx_struct * ctx);
    void	    (*free)   (struct SCsCParser_Ctx_struct * ctx);
};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API pSCsCParser SCsCParserNew         (
pANTLR3_COMMON_TOKEN_STREAM
 instream);
ANTLR3_API pSCsCParser SCsCParserNewSSD      (
pANTLR3_COMMON_TOKEN_STREAM
 instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the 
parser
 will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif
#define EOF      -1
#define ALIASNONAME      4
#define ATTRSEP      5
#define COMMENT      6
#define CONNECTORS      7
#define CONTENT      8
#define ELEMTYPE      9
#define KEYWORD      10
#define LPAR      11
#define LPAR_INT      12
#define LPAR_OSET      13
#define LPAR_SET      14
#define LPAR_TRF      15
#define NAME      16
#define OBJSEP      17
#define RPAR      18
#define RPAR_INT      19
#define RPAR_OSET      20
#define RPAR_SET      21
#define RPAR_TRF      22
#define SENTSEP      23
#define TRIPLESEP      24
#define URL      25
#define WS      26
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for SCsCParser
 * =============================================================================
 */
/** } */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
